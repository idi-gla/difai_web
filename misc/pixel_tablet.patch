diff --git a/nt36xxx/nt36xxx.c b/nt36xxx/nt36xxx.c
index ab7d104..3b00ec6 100644
--- a/nt36xxx/nt36xxx.c
+++ b/nt36xxx/nt36xxx.c
@@ -1842,14 +1842,21 @@ static irqreturn_t nvt_ts_work_func(int irq, void *data)
     default:
         input_report_abs(ts->input_dev, ABS_MT_CUSTOM, 0);
     }
 #endif
 
+    /* updating this to save the touch info in the main driver data
+     * struct instead of just handing it off to goog_touch_interface */
+
     for (i = 0; i < ts->max_touch_num; i++) {
         position = 1 + 6 * i;
         input_id = (uint8_t)(point_data[position + 0] >> 3);
         input_status = (uint8_t)(point_data[position + 0] & 0x07);
+
+        ts->fingers[i].id = input_id;
+        ts->fingers[i].status = input_status;
+
         if ((input_id == 0) || (input_id > ts->max_touch_num))
             continue;
 
         if (((point_data[position] & 0x07) == 0x01) ||
             ((point_data[position] & 0x07) == 0x02)) {  //finger down (enter & moving)
@@ -1881,10 +1888,15 @@ static irqreturn_t nvt_ts_work_func(int irq, void *data)
                         input_p = (uint32_t)(point_data[position + 5]);
 #endif
             if (input_p == 0)
                 input_p = 1;
 
+            ts->fingers[i].x = input_x;
+            ts->fingers[i].y = input_y;
+            ts->fingers[i].w = input_w;
+            ts->fingers[i].p = input_p;
+
             press_id[input_id - 1] = 1;
 
             if (ts->report_protocol == REPORT_PROTOCOL_B) {
                 goog_input_mt_slot(ts->gti, ts->input_dev, input_id - 1);
                 goog_input_mt_report_slot_state(ts->gti, ts->input_dev,
diff --git a/nt36xxx/nt36xxx.h b/nt36xxx/nt36xxx.h
index f91ff8c..ea2407e 100644
--- a/nt36xxx/nt36xxx.h
+++ b/nt36xxx/nt36xxx.h
@@ -23,10 +23,11 @@
 #include <linux/input.h>
 #include <linux/of.h>
 #include <linux/spi/spi.h>
 #include <linux/uaccess.h>
 #include <linux/version.h>
+#include <linux/cdev.h>
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
 #include <linux/earlysuspend.h>
 #endif
 
@@ -199,10 +200,19 @@ enum gesture_id : u8 {
     GESTURE_SLIDE_LEFT = 23,
     GESTURE_SLIDE_RIGHT = 24,
     GESTURE_ID_MAX,
 };
 
+struct finger_info {
+    uint32_t x;     /* x position */
+    uint32_t y;     /* y position */
+    uint32_t w;     /* contact patch size (touch major) */
+    uint32_t p;     /* touch strength/pressure */
+    uint32_t id;     /* finger ID */
+    uint32_t status; /* finger status, not sure of values */
+};
+
 struct nvt_ts_data {
     struct spi_device *client;
     struct input_dev *input_dev;
     struct delayed_work nvt_fwu_work;
     uint16_t addr;
@@ -337,10 +347,20 @@ struct nvt_ts_data {
 #ifdef GOOG_TOUCH_INTERFACE
     struct TouchOffloadCoord pen_offload_coord;
 #endif
     ktime_t pen_offload_coord_timestamp;
     u8 pen_active;
+
+    /* new cdev struct */
+    struct cdev cdev_data;      /* character device struct */
+    struct class *sysfs_class;   /* device class for sysfs */
+    struct device *sysfs_device; /* device for sysfs */
+    dev_t devnum;               /* store device major/minor numbers */
+    uint64_t num_spi_reads;     /* for checking actual sample rate */
+
+    /* store basic data about each finger */
+    struct finger_info fingers[TOUCH_MAX_FINGER_NUM];
 };
 
 #if NVT_TOUCH_PROC
 struct nvt_flash_data {
     rwlock_t lock;
diff --git a/nt36xxx/nt36xxx_ext_api.c b/nt36xxx/nt36xxx_ext_api.c
index d8ef7c5..e4da022 100644
--- a/nt36xxx/nt36xxx_ext_api.c
+++ b/nt36xxx/nt36xxx_ext_api.c
@@ -18,10 +18,12 @@
  */
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
 #include "nt36xxx.h"
 
 #if NVT_TOUCH_EXT_API
 #define PLAYBACK_RAWDATA_ADDR             0x26238
 #define GET_CALIBRATION_ADDR              0x2B31A
@@ -2306,10 +2308,109 @@ static const struct file_operations nvt_cc_uniformity_fops = {
     .llseek = seq_lseek,
     .release = seq_release,
 };
 #endif
 
+
+static int cdev_open(struct inode *inode, struct file *file)
+{
+    /* called when the character device is opened, empty for now */
+    return 0;
+}
+
+static int cdev_release(struct inode *inode, struct file *file)
+{
+    /* called when the character device is closed, empty for now */
+    return 0;
+}
+
+static ssize_t cdev_read(struct file *file, char __user *user_buffer, size_t size, loff_t *offset)
+{
+    /* this is the handler for read syscalls on the character device.*/
+
+    uint8_t *buf;
+    uint32_t buf_size;
+    uint32_t min_buf_size;
+    uint32_t user_buf_offset = 0;
+    uint32_t finger_data_size = sizeof(struct finger_info) * TOUCH_MAX_FINGER_NUM;
+
+    /* currently this will return a binary blob consisting of attributes for the currently
+     * active touch points followed by the heatmap data for the current mode. the touch data
+     * is a fixed size struct, but the heatmap size varies slightly so apps should check
+     * total_size - finger_data_size to get heatmap size */
+
+    /* set heatmap buffer and buffer size based on current mode */
+    switch (ts->heatmap_data_type) {
+        case HEATMAP_DATA_TYPE_TOUCH_STRENGTH:
+            buf = ts->heatmap_spi_buf;
+            buf_size = ts->heatmap_spi_buf_size;
+            break;
+        case HEATMAP_DATA_TYPE_TOUCH_STRENGTH_COMP:
+            buf = ts->heatmap_out_buf;
+            buf_size = ts->heatmap_out_buf_size;
+            break;
+        case HEATMAP_DATA_TYPE_TOUCH_RAWDATA:
+        case HEATMAP_DATA_TYPE_TOUCH_BASELINE:
+        default:
+            buf = ts->extra_spi_buf;
+            buf_size = ts->extra_spi_buf_size;
+            break;
+    }
+
+    min_buf_size = size < buf_size + sizeof(uint32_t) + finger_data_size;
+    if (size < min_buf_size) {
+        NVT_ERR("Buffer size too small (%u < %u)\n", size, min_buf_size);
+        return -EINVAL;
+    }
+
+    /* output buffer is big enough to hold the sensor data. next
+     * step is to copy the data from kernel space -> user space */
+
+    /* acquire the same mutex as nvt_ts_work_func to avoid data being updated mid-copy */
+    mutex_lock(&ts->lock);
+
+    /* TODO: probably better to do one copy_to_user instead of 2? */
+
+    /* start by copying the finger data */
+    if (copy_to_user(user_buffer, ts->fingers, finger_data_size)) {
+        NVT_ERR("Error copying finger data to user buffer\n");
+        mutex_unlock(&ts->lock);
+        return -EFAULT;
+    }
+    user_buf_offset += finger_data_size;
+
+    if (copy_to_user(user_buffer + user_buf_offset, buf, buf_size)) {
+        NVT_ERR("Error copying heatmap data to user buffer\n");
+        mutex_unlock(&ts->lock);
+        return -EFAULT;
+    }
+
+    mutex_unlock(&ts->lock);
+    /* everything succeeded. returning 0 signals "end of file" */
+    /* TODO should return bytes copied? */
+    return 0;
+}
+static ssize_t cdev_write(struct file *file, const char __user *user_buffer, size_t size, loff_t *offset)
+{
+    /* handler for write commands, leaving this empty in favour of using existing sysfs interface */
+    return 0;
+}
+static long cdev_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+    return 0;
+}
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0))
+static const struct file_operations nvt_cdev_fops = {
+    .open = cdev_open,
+    .read = cdev_read,
+    .write = cdev_write,
+    .release = cdev_release,
+    .unlocked_ioctl = cdev_ioctl,
+};
+#endif
+
 #define NVT_TOUCH_SYSFS_LINK "nvt_touch"
 int32_t nvt_extra_api_init(void)
 {
     int32_t ret;
 
@@ -2336,16 +2437,42 @@ int32_t nvt_extra_api_init(void)
     if (NVT_proc_cc_uniformity_entry == NULL)
         NVT_ERR("create /proc/nvt_cc_uniformity Failed!\n");
 
     NVT_LOG("--\n");
 
+    NVT_LOG("*** Attempting to create /dev node");
+
+    /* start by initialising the cdev struct in the larger driver data struct */
+    cdev_init(&(ts->cdev_data), &nvt_cdev_fops);
+
+    /* dynamically allocate device identifier */
+    ret = alloc_chrdev_region(&(ts->devnum), 0, 1, "nt36xxx");
+    NVT_LOG("got major/minor %d/%d", MAJOR(ts->devnum), MINOR(ts->devnum));
+
+    if (cdev_add(&(ts->cdev_data), ts->devnum, 1) < 0) {
+        NVT_LOG("*** ERROR adding cdev\n");
+    }
+
+    ts->sysfs_class = class_create(THIS_MODULE, "nt36xxx");
+    ts->sysfs_device = device_create(ts->sysfs_class, NULL, ts->devnum, NULL, "nt36xxx");
+
+    /* zero polling counter */
+    ts->num_spi_reads = 0;
+
+    NVT_LOG("cdev setup completed");
+
 exit_nvt_touch_sysfs_init:
     return ret;
 }
 
 void nvt_extra_api_deinit(void)
 {
+    device_destroy(ts->sysfs_class, ts->devnum);
+    class_destroy(ts->sysfs_class);
+    cdev_del(&(ts->cdev_data));
+    unregister_chrdev_region(ts->devnum, 1);
+
     NVT_LOG("++\n");
     devm_device_remove_group(&ts->input_dev->dev, &nvt_api_attribute_group);
     sysfs_remove_link(ts->input_dev->dev.kobj.parent, NVT_TOUCH_SYSFS_LINK);
     devm_kfree(&ts->client->dev, ts->heatmap_spi_buf);
     ts->heatmap_spi_buf = NULL;
diff --git a/nt36xxx/nt36xxx_goog.c b/nt36xxx/nt36xxx_goog.c
index 629e42d..768a623 100644
--- a/nt36xxx/nt36xxx_goog.c
+++ b/nt36xxx/nt36xxx_goog.c
@@ -140,10 +140,12 @@ int nvt_get_channel_data(void *private_data,
             *size = ts->heatmap_out_buf_size;
         } else {
             *ptr = data;
             *size = data_size;
         }
+
+        ts->num_spi_reads++;
     } else {
         NVT_ERR("invalid size for SPI read(type: %d)!\n", ts->heatmap_data_type);
     }
 
     return ret;
